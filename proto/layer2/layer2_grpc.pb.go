// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/layer2.proto

package layer2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Layer2Service_SubmitTransaction_FullMethodName      = "/layer2proto.Layer2Service/SubmitTransaction"
	Layer2Service_MonitorBatchStatus_FullMethodName     = "/layer2proto.Layer2Service/MonitorBatchStatus"
	Layer2Service_TriggerBatchProcessing_FullMethodName = "/layer2proto.Layer2Service/TriggerBatchProcessing"
)

// Layer2ServiceClient is the client API for Layer2Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Layer2ServiceClient interface {
	// Unary RPC for sending a single transaction
	SubmitTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// Server-side streaming for monitoring batch status
	MonitorBatchStatus(ctx context.Context, in *BatchStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BatchStatusResponse], error)
	// Unary RPC to request batch processing manually (if needed)
	TriggerBatchProcessing(ctx context.Context, in *BatchProcessingRequest, opts ...grpc.CallOption) (*BatchProcessingResponse, error)
}

type layer2ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLayer2ServiceClient(cc grpc.ClientConnInterface) Layer2ServiceClient {
	return &layer2ServiceClient{cc}
}

func (c *layer2ServiceClient) SubmitTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, Layer2Service_SubmitTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layer2ServiceClient) MonitorBatchStatus(ctx context.Context, in *BatchStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BatchStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Layer2Service_ServiceDesc.Streams[0], Layer2Service_MonitorBatchStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BatchStatusRequest, BatchStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Layer2Service_MonitorBatchStatusClient = grpc.ServerStreamingClient[BatchStatusResponse]

func (c *layer2ServiceClient) TriggerBatchProcessing(ctx context.Context, in *BatchProcessingRequest, opts ...grpc.CallOption) (*BatchProcessingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchProcessingResponse)
	err := c.cc.Invoke(ctx, Layer2Service_TriggerBatchProcessing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Layer2ServiceServer is the server API for Layer2Service service.
// All implementations must embed UnimplementedLayer2ServiceServer
// for forward compatibility.
type Layer2ServiceServer interface {
	// Unary RPC for sending a single transaction
	SubmitTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	// Server-side streaming for monitoring batch status
	MonitorBatchStatus(*BatchStatusRequest, grpc.ServerStreamingServer[BatchStatusResponse]) error
	// Unary RPC to request batch processing manually (if needed)
	TriggerBatchProcessing(context.Context, *BatchProcessingRequest) (*BatchProcessingResponse, error)
	mustEmbedUnimplementedLayer2ServiceServer()
}

// UnimplementedLayer2ServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLayer2ServiceServer struct{}

func (UnimplementedLayer2ServiceServer) SubmitTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (UnimplementedLayer2ServiceServer) MonitorBatchStatus(*BatchStatusRequest, grpc.ServerStreamingServer[BatchStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method MonitorBatchStatus not implemented")
}
func (UnimplementedLayer2ServiceServer) TriggerBatchProcessing(context.Context, *BatchProcessingRequest) (*BatchProcessingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerBatchProcessing not implemented")
}
func (UnimplementedLayer2ServiceServer) mustEmbedUnimplementedLayer2ServiceServer() {}
func (UnimplementedLayer2ServiceServer) testEmbeddedByValue()                       {}

// UnsafeLayer2ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Layer2ServiceServer will
// result in compilation errors.
type UnsafeLayer2ServiceServer interface {
	mustEmbedUnimplementedLayer2ServiceServer()
}

func RegisterLayer2ServiceServer(s grpc.ServiceRegistrar, srv Layer2ServiceServer) {
	// If the following call pancis, it indicates UnimplementedLayer2ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Layer2Service_ServiceDesc, srv)
}

func _Layer2Service_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Layer2ServiceServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Layer2Service_SubmitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Layer2ServiceServer).SubmitTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Layer2Service_MonitorBatchStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BatchStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Layer2ServiceServer).MonitorBatchStatus(m, &grpc.GenericServerStream[BatchStatusRequest, BatchStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Layer2Service_MonitorBatchStatusServer = grpc.ServerStreamingServer[BatchStatusResponse]

func _Layer2Service_TriggerBatchProcessing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchProcessingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Layer2ServiceServer).TriggerBatchProcessing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Layer2Service_TriggerBatchProcessing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Layer2ServiceServer).TriggerBatchProcessing(ctx, req.(*BatchProcessingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Layer2Service_ServiceDesc is the grpc.ServiceDesc for Layer2Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Layer2Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "layer2proto.Layer2Service",
	HandlerType: (*Layer2ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTransaction",
			Handler:    _Layer2Service_SubmitTransaction_Handler,
		},
		{
			MethodName: "TriggerBatchProcessing",
			Handler:    _Layer2Service_TriggerBatchProcessing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorBatchStatus",
			Handler:       _Layer2Service_MonitorBatchStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/layer2.proto",
}
